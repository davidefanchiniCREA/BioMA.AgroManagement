//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CRA.AgroManagement 
{
    using System;
    using System.Collections;
    using CRA.ModelLayer.Core;
    
    
    /// <summary>StatesRainDataVarInfo contains the attributes for each variable in the domain class StatesAgroMan. Attributes are valorized via the static constructor. The data-type VarInfo causes  a dependency to the assembly CRA.Core.Preconditions.dll</summary>
	/// <remark>DCC - Domain Class Coder, http://www.isci.it/asp/asp2/utils.asp </remark>
    public class StatesAgroManVarInfo : IVarInfoClass
    {

        #region Fields

        static  VarInfo _leafAreaIndex = new VarInfo();
        static  VarInfo _aboveGroundBiomass = new VarInfo();
        static  VarInfo _airTemperatureAverage = new VarInfo();
        static  VarInfo _waterLevel = new VarInfo();
        static  VarInfo _sugarContent = new VarInfo();
        static  VarInfo _rain = new VarInfo();
        static VarInfo _soilTemperatureUpperLayer = new VarInfo();
        static VarInfo _crownRadius = new VarInfo();
        static VarInfo _hostTissueDiseased = new VarInfo();
        static VarInfo _infectionEvents = new VarInfo();
        static VarInfo _growingDegreeDays = new VarInfo();
        static VarInfo _growingDegreeDaysTransplanting = new VarInfo();
        static VarInfo _waterStress = new VarInfo();
        #endregion

        #region Constructor

        static StatesAgroManVarInfo() 
        {
            DescribeVariables();
        }

        #endregion

        #region IVarInfoClass Members

        /// <summary>
        /// States used by the component AgroManagement
        /// </summary>
        public string Description
        {
            get { return "States used by the component AgroManagement."; }
        }

        /// <summary>
        /// Domain class of reference
        /// </summary>
        public string DomainClassOfReference
        {
            get { return "CRA.AgroManagement.StatesAgroMan"; }
        }

        /// <summary>
        /// Description of the domain class on the knowledge base
        /// </summary>
        public string URL
        {
            get { return "http://ontology.seamless-ip.org"; }
        }

        #endregion

        #region Properties
     
        /// <summary>
        /// NUmber of infection events 
        /// </summary>
        public static VarInfo InfectionEvents
        {
            get { return _infectionEvents; }
        }

        
        /// <summary>
        /// NUmber of infection events 
        /// </summary>
        public static VarInfo GrowingDegreeDays
        {
            get { return _growingDegreeDays; }
        }

      
        /// <summary>
        /// NUmber of infection events 
        /// </summary>
        public static VarInfo GrowingDegreeDaysTransplanting
        {
            get { return _growingDegreeDaysTransplanting; }
        }

     
        /// <summary>
        /// NUmber of infection events 
        /// </summary>
        public static VarInfo WaterStress
        {
            get { return _waterStress; }
        }

       
        /// <summary>
        /// Host tissue diseased
        /// </summary>
        public static VarInfo HostTissueDiseased
        {
            get { return _hostTissueDiseased; }
        }

        /// <summary>area of leaves per unit area of soil</summary>
        public static  VarInfo LeafAreaIndex 
        {
            get { return  _leafAreaIndex; }
        }
        
        /// <summary>above ground biomass</summary>
        public static  VarInfo AboveGroundBiomass 
        {
            get { return  _aboveGroundBiomass; }
        }
        
        /// <summary>average air temperature</summary>
        public static  VarInfo AirTemperatureAverage 
        {
            get { return  _airTemperatureAverage; }
        }
        
        /// <summary>water level on a field</summary>
        public static  VarInfo WaterLevel 
        {
            get { return  _waterLevel; }
        }
        
        /// <summary>sugar content of fruits</summary>
        public static  VarInfo SugarContent 
        {
            get { return  _sugarContent; }
        }

        /// <summary>sugar content of fruits</summary>
        public static VarInfo Rain
        {
            get { return _rain; }
        }

        /// <summary>Soil temperature of upper layer</summary>
        public static VarInfo SoilTemperatureUpperLayer
        {
            get { return _soilTemperatureUpperLayer; }
        }

        /// <summary>
        /// VarInfo of plant crown radius
        /// </summary>
        public static VarInfo CrownRadius
        {
            get { return _crownRadius; }
        }

        #endregion

        #region Constructor methods

        static void DescribeVariables() {
            //   
            _leafAreaIndex.Name = "LeafAreaIndex";
            _leafAreaIndex.Description = "Area of leaves per unit area of soil";
            _leafAreaIndex.MaxValue = 15;
            _leafAreaIndex.MinValue = 0;
            _leafAreaIndex.DefaultValue = 3;
            _leafAreaIndex.Units = "m2/m2";
            _leafAreaIndex.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _aboveGroundBiomass.Name = "AboveGroundBiomass";
            _aboveGroundBiomass.Description = "Above ground biomass";
            _aboveGroundBiomass.MaxValue = 40;
            _aboveGroundBiomass.MinValue = 0;
            _aboveGroundBiomass.DefaultValue = 1;
            _aboveGroundBiomass.Units = "t/ha";
            _aboveGroundBiomass.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _airTemperatureAverage.Name = "AirTemperatureAverage";
            _airTemperatureAverage.Description = "Average air temperature";
            _airTemperatureAverage.MaxValue = 40;
            _airTemperatureAverage.MinValue = -20;
            _airTemperatureAverage.DefaultValue = 10;
            _airTemperatureAverage.Units = "C";
            _airTemperatureAverage.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _waterLevel.Name = "WaterLevel";
            _waterLevel.Description = "Water level on a field";
            _waterLevel.MaxValue = 2;
            _waterLevel.MinValue = 0;
            _waterLevel.DefaultValue = 0;
            _waterLevel.Units = "m";
            _waterLevel.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _sugarContent.Name = "SugarContent";
            _sugarContent.Description = "Sugar content of fruits";
            _sugarContent.MaxValue = 25;
            _sugarContent.MinValue = 0;
            _sugarContent.DefaultValue = 1;
            _sugarContent.Units = "%";
            _sugarContent.ValueType = VarInfoValueTypes.GetInstanceForName("Double");

            _rain.Name = "Rain";
            _rain.Description = "Daily rainfall";
            _rain.MaxValue = 200;
            _rain.MinValue = 0;
            _rain.DefaultValue = 0;
            _rain.Units = "mm";
            _rain.ValueType = VarInfoValueTypes.GetInstanceForName("Double");

            _soilTemperatureUpperLayer.Name = "SoilTemperatureUpperLayer";
            _soilTemperatureUpperLayer.Description = "Soil temperature of an upper layer (thickness depends on input associated)";
            _soilTemperatureUpperLayer.MaxValue = 40;
            _soilTemperatureUpperLayer.MinValue = -20;
            _soilTemperatureUpperLayer.DefaultValue = 5;
            _soilTemperatureUpperLayer.Units = "C";
            _soilTemperatureUpperLayer.ValueType = VarInfoValueTypes.GetInstanceForName("Double");

            _crownRadius.Name = "CrownRadius";
            _crownRadius.Description = "Plant crown radius";
            _crownRadius.MaxValue = 50;
            _crownRadius.MinValue = 0;
            _crownRadius.DefaultValue = 0.5;
            _crownRadius.Units = "m";
            _crownRadius.ValueType = VarInfoValueTypes.GetInstanceForName("Double");

            _hostTissueDiseased.Name = "HostTissueDiseased";
            _hostTissueDiseased.Description = "Host tissue diseased";
            _hostTissueDiseased.MaxValue = 1;
            _hostTissueDiseased.MinValue = 0;
            _hostTissueDiseased.DefaultValue = 0.1;
            _hostTissueDiseased.Units = "%";
            _hostTissueDiseased.ValueType = VarInfoValueTypes.GetInstanceForName("Double");

            _infectionEvents.Name = "InfectionEvents";
            _infectionEvents.Description = "Number of infection events";
            _infectionEvents.MaxValue = 24;
            _infectionEvents.MinValue = 0;
            _infectionEvents.DefaultValue = 1;
            _infectionEvents.Units = "%";
            _infectionEvents.ValueType = VarInfoValueTypes.GetInstanceForName("Double");

            _growingDegreeDays.Name = "GrowingDegreeDays";
            _growingDegreeDays.Description = "Growing degree days accumulated by the crop";
            _growingDegreeDays.MaxValue = 1000;
            _growingDegreeDays.MinValue = 0;
            _growingDegreeDays.DefaultValue = 200;
            _growingDegreeDays.Units = "°C d-1";
            _growingDegreeDays.ValueType = VarInfoValueTypes.GetInstanceForName("Double");

            _growingDegreeDaysTransplanting.Name = "GrowingDegreeDaysTransplanting";
            _growingDegreeDaysTransplanting.Description = "Growing degree days accumulated by the crop during transplanting shock";
            _growingDegreeDaysTransplanting.MaxValue = 1000;
            _growingDegreeDaysTransplanting.MinValue = 0;
            _growingDegreeDaysTransplanting.DefaultValue = 200;
            _growingDegreeDaysTransplanting.Units = "°C d-1";
            _growingDegreeDaysTransplanting.ValueType = VarInfoValueTypes.GetInstanceForName("Double");

            _waterStress.Name = "WaterStress";
            _waterStress.Description = "Crop water stress";
            _waterStress.MaxValue = 1;
            _waterStress.MinValue = 0;
            _waterStress.DefaultValue = 0.8;
            _waterStress.Units = "unitless";
            _waterStress.ValueType = VarInfoValueTypes.GetInstanceForName("Double");

        }

        #endregion

    }
}
